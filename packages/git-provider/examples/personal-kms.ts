import { GitFileSystem, GitHubProvider } from '../src';

/**
 * 个人知识管理系统
 * 基于Git的知识管理，支持版本控制和协作
 */
export class PersonalKMS {
    private provider: GitHubProvider;
    private fs: GitFileSystem;

    constructor(token: string, owner: string, repo: string) {
        this.provider = new GitHubProvider({ token });
        this.fs = new GitFileSystem(this.provider, { owner, repo });
    }

    /**
     * 添加笔记
     */
    async addNote(category: string, title: string, content: string, tags: string[] = []) {
        const timestamp = new Date().toISOString().split('T')[0];
        const path = `${category}/${timestamp}-${title}.md`;

        const noteContent = this.generateNoteContent(title, content, tags, timestamp);

        await this.fs.writeFile(path, noteContent, {
            message: `Add note: ${title} in ${category}`,
        });

        console.log(`✅ Note added: ${path}`);
        return path;
    }

    /**
     * 获取笔记历史
     */
    async getNoteHistory(category: string, title: string) {
        const path = `${category}/${title}.md`;

        try {
            const commits = await this.provider.getCommits({
                owner: this.fs.options.owner,
                repo: this.fs.options.repo,
                path
            });

            return commits.data.map(commit => ({
                sha: commit.sha,
                message: commit.message,
                author: commit.author.name,
                date: commit.author.date,
                htmlUrl: commit.htmlUrl
            }));
        } catch (error) {
            console.log(`No history found for: ${path}`);
            return [];
        }
    }

    /**
     * 搜索笔记
     */
    async searchNotes(query: string, category?: string) {
        const basePath = category || '';
        const files = await this.fs.readdir(basePath);

        const results: { path: string; name: string; content: string }[] = [];
        for (const file of files) {
            if (file.type === 'file' && file.name.endsWith('.md')) {
                try {
                    const content = await this.fs.readFile(`${basePath}/${file.name}`, { encoding: 'utf-8' });
                    const contentStr = typeof content === 'string' ? content : new TextDecoder().decode(content);
                    if (contentStr.toLowerCase().includes(query.toLowerCase())) {
                        results.push({
                            path: `${basePath}/${file.name}`,
                            name: file.name,
                            content: contentStr.substring(0, 200) + '...'
                        });
                    }
                } catch (error) {
                    // Skip files that can't be read
                }
            }
        }

        return results;
    }

    /**
     * 创建知识库结构
     */
    async initializeStructure() {
        const categories = [
            'daily-notes',
            'projects',
            'learning',
            'ideas',
            'templates',
            'assets'
        ];

        for (const category of categories) {
            try {
                await this.fs.mkdir(category);
                console.log(`✅ Created category: ${category}`);
            } catch (error) {
                console.log(`Category already exists: ${category}`);
            }
        }

        // 创建README
        const readmeContent = `# Personal Knowledge Base

This is my personal knowledge base managed with Git.

## Categories

- **daily-notes**: Daily notes and journal entries
- **projects**: Project documentation and notes
- **learning**: Learning notes and resources
- **ideas**: Ideas and concepts
- **templates**: Note templates
- **assets**: Images and other assets

## Usage

This knowledge base is managed using the @dimstack/git-provider library.
`;

        await this.fs.writeFile('README.md', readmeContent, {
            message: 'Initialize knowledge base structure'
        });

        console.log('✅ Knowledge base initialized');
    }

    /**
     * 生成笔记内容
     */
    private generateNoteContent(title: string, content: string, tags: string[], timestamp: string): string {
        const tagString = tags.length > 0 ? tags.map(tag => `#${tag}`).join(' ') : '';

        return `# ${title}

**Date:** ${timestamp}  
**Tags:** ${tagString}

---

${content}

---

*Generated by PersonalKMS*
`;
    }

    /**
     * 获取统计信息
     */
    async getStats() {
        const categories = ['daily-notes', 'projects', 'learning', 'ideas', 'templates'];
        const stats: Record<string, number> = {};

        for (const category of categories) {
            try {
                const files = await this.fs.readdir(category);
                stats[category] = files.filter(f => f.type === 'file' && f.name.endsWith('.md')).length;
            } catch (error) {
                stats[category] = 0;
            }
        }

        return stats;
    }
}

// 使用示例
async function main() {
    // 替换为你的GitHub token和仓库信息
    const token = process.env.GITHUB_TOKEN || 'your-github-token';
    const owner = 'your-username';
    const repo = 'knowledge-base';

    const kms = new PersonalKMS(token, owner, repo);

    try {
        // 初始化知识库
        await kms.initializeStructure();

        // 添加笔记
        await kms.addNote(
            'daily-notes',
            'Learning Git Provider',
            'Today I learned about the @dimstack/git-provider library. It provides a unified interface for working with Git repositories across different platforms like GitHub and Gitee.',
            ['git', 'learning', 'typescript']
        );

        await kms.addNote(
            'projects',
            'Personal KMS Project',
            'Building a personal knowledge management system using Git as the backend. This allows for version control, collaboration, and easy backup.',
            ['project', 'kms', 'git']
        );

        // 搜索笔记
        const searchResults = await kms.searchNotes('git');
        console.log('🔍 Search results for "git":', searchResults);

        // 获取统计信息
        const stats = await kms.getStats();
        console.log('📊 Knowledge base stats:', stats);

    } catch (error) {
        console.error('❌ Error:', error);
    }
}

// 如果直接运行此文件
if (require.main === module) {
    main();
} 